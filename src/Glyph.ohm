Glyph {
  Program   = Stmt*

  Stmt    = MainStmt
          | LambdaStmt
          | ImportStmt
          | WhileStmt
          | LetStmt
          | ConstStmt
          | IfStmt
          | EvokeStmt
          | InvokeStmt
          | ReturnStmt
          | ExscribeStmt
          | TypeStmt
          | Exp endchar                       --exprstmt
          | break endchar                     --break
          | AssignmentStmt
          | ("++" | "--") Primary_id endchar  --bump
          | space+

  VarDec = id Type_hint? "=" Exp endchar
  Type_hint = ":" Type

  Type    = Type "?"              --option
          | ("&" | "*") Type      --refderef
          | "[" Type "]"          --array
          | "(" Type ")"          --group
          | "conjure" "[" Type "]"  -- conjure
          | type

  ExscribeStmt = exscribe Exp endchar
  ImportBlock = "{" id ("," id)* "}"
  ImportStmt = affix module "@" (id | ImportBlock)? endchar

  MainStmt = main "=" (Block | Stmt | Exp)
  EvokeStmt = evoke id "(" ParameterListOpt ")" "->" Type FunctionBody

  ParameterListOpt = ListOf<Parameter, ",">
  Parameter = id Type_hint?

  Arguments = "(" ListOf<Exp, ","> ")"
  InvokeStmt = invoke ~(exscribe) id Arguments endchar --invoke
  
  TypeStmt = typeof Exp endchar

  ConjureStmt = conjure Block
  LetStmt = let VarDec
  ConstStmt = const VarDec
  AssignmentStmt = Primary_id "=" Exp ";"?
  LambdaStmt = id ":" "(" ParameterListOpt ")" "->" Type "=" ConjureStmt

  ReturnStmt = return Exp
  IfStmt = if Exp Block (else (Block | IfStmt))?
  WhileStmt = while Exp Block
  Block = "{" Stmt* "}"

  Function = id (Arguments | Exp)?
  FunctionBody = "=" Stmt_exprstmt --func
               | Block    --decl

  Exp = Condition relop Condition --relop
      | Condition

  Condition = Condition "&&" Term --and
            | Condition "||" Term --or
            | Condition "+" Term --add
            | Condition "-" Term --sub
            | Term

  Term = Term "*" Factor --mul
       | Term "/" Factor --div
       | Term "%" Factor --mod
       | Factor

  Factor = Primary "**" Factor --exp
         | "-" Primary         --neg
         | Primary

  Primary = id Arguments          --functionCall
          | Primary Arguments     --call
          | numeral
          | true                  --true
          | false                 --false
          | stringlit             --string
          | charlit               --char
          | codepointlit          --codepoint
          | Primary_addr          --address
          | Primary_deref         --dereference
          | Primary "[" Exp "]"   --subscript
          | Primary_lambda        
          | null                  --null 
          | id                    --id
          | "[" ListOf<Exp, ","> "]" --array
          | "(" Exp ")"          --parens

  affix = "affix" ~idchar
  let = "let" ~idchar
  const = "const" ~idchar
  exscribe = "exscribe" ~idchar
  typeof = "typeof" ~idchar
  evoke = "evoke" ~idchar
  conjure = "conjure" ~idchar
  invoke = "invoke" ~idchar
  while = "while" ~idchar
  if = "if" ~idchar
  else = "else" ~idchar
  break = "break" ~idchar
  true = "true" ~idchar
  false = "false" ~idchar
  return = "return" ~idchar
  main = "main" ~idchar
  null = "null" ~idchar


  type = (numericType | bool | string | codepoint | glyph | void | anyType) ~idchar
  numericType = unsignedNumericType | signedNumericType

  unsignedNumericType = "uint" bitsizes128
                       | "ufloat" bitsizes64
                       | "udecim" bitsizes64
                       | "uslash" bitsizes128
                       | "uslog" bitsizes128

  signedNumericType = "int" bitsizes128
                     | "float" bitsizes64
                     | "decim" bitsizes64
                     | "slash" bitsizes128
                     | "slog" bitsizes128

  bool = "bool"
  string = "string"
  codepoint = "codepoint"
  glyph = "glyph"
  void = "void"
  anyType = "any"


  bitsizes64 = ("8" | "16" | "32" | "64")
  bitsizes128 = bitsizes64 | "128"

  keyword = affix | evoke | conjure | invoke | main | while | if | else | break | let | const | true | false | type | return

  Primary_addr = "&" Primary
  Primary_deref = "*" Primary

  Primary_lambda = id ":" "(" ParameterListOpt ")" "->" Type "=" ConjureStmt

  id = ~keyword letter idchar*
  module = letter idchar*
  idchar = letter | digit | "_"

  numeral = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  stringlit = "\"" (~"\"" any)* "\""
  charlit = "'" (~"\'" any) "'"
  codepointlit = "'" "U+" hexDigits "'"
  hexDigits = hexDigit hexDigit hexDigit hexDigit hexDigit? hexDigit?
        
  relop = "<=" | "<" | "==" | "!=" | ">=" | ">"

  space += "/@" (~"@/" any)* "@/" --comment

  endchar = ";"
}